# Fluentd DaemonSet for VMware Log Insight

####################################################
# Dimitri de Swart                                 #
# Cloud Management Specialist @ VMware Netherlands #
# https://vmguru.com/author/dimitri/               #
####################################################

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: fluentd-config
  namespace: kube-system
data:
  fluent.conf: |
    # We can use this config to load some default config or load user defined config
    @include myapp-fluent.conf

  myapp-fluent.conf: |
    # Input sources
    @include general.conf
    @include systemd.conf
    @include kubernetes.conf
    @include kube-audit.conf
    # Forwarding - Be vigilant of the order in which these plugins are specified. Order matters!
    @include vmw-li.conf

  general.conf: |
    <system>
      log_level info
    </system>
    # Prevent fluentd from handling records containing its own logs to handle cycles.
    <label @FLUENT_LOG>
      <match fluent.**>
        @type null
      </match>
    </label>

  systemd.conf: |
    # Journal logs
    <source>
      @type systemd
      @id in_systemd_logs
      tag kubelet
      path /var/log/journal
      # Can filter logs if we want, e.g.
      matches [{ "_SYSTEMD_UNIT": "kubelet.service" }]
      read_from_head true
      <storage>
        @type local
        persistent true
        path /var/log/fluentd-systemdlog-kubelet.pos
      </storage>
      <entry>
        fields_strip_underscores true
        fields_lowercase true
      </entry>
    </source>

  kubernetes.conf: |
    # Container logs
    # Kubernetes docker logs are stored under /var/lib/docker/containers for
    # which kubernetes creates a symlink at /var/log/containers
    <source>
      @type tail
      @id in_tail_container_logs
      path /var/log/containers/*.log
      pos_file /var/log/fluentd-docker.pos
      read_from_head true
      tag kubernetes.*
      <parse>
        @type json
        time_key time
        keep_time_key true
        time_format %Y-%m-%dT%H:%M:%S.%NZ
      </parse>
    </source>
    # Kubernetes metadata filter that tags additional meta data for each container event
    <filter kubernetes.**>
      @type kubernetes_metadata
      @id filter_kube_metadata
      kubernetes_url "#{ENV['FLUENT_FILTER_KUBERNETES_URL'] || 'https://' + ENV.fetch('KUBERNETES_SERVICE_HOST') + ':' + ENV.fetch('KUBERNETES_SERVICE_PORT') + '/api'}"
      verify_ssl "#{ENV['KUBERNETES_VERIFY_SSL'] || false}"
      ca_file "#{ENV['KUBERNETES_CA_FILE']}"
      skip_labels "#{ENV['FLUENT_KUBERNETES_METADATA_SKIP_LABELS'] || 'false'}"
      skip_container_metadata "#{ENV['FLUENT_KUBERNETES_METADATA_SKIP_CONTAINER_METADATA'] || 'false'}"
      skip_master_url "#{ENV['FLUENT_KUBERNETES_METADATA_SKIP_MASTER_URL'] || 'false'}"
      skip_namespace_metadata "#{ENV['FLUENT_KUBERNETES_METADATA_SKIP_NAMESPACE_METADATA'] || 'false'}"
    </filter>
    # Prefix the tag by namespace. This would make it easy to match logs by namespaces
    <match kubernetes.**>
      @type rewrite_tag_filter
      <rule>
        key $.kubernetes.namespace_name
        pattern ^(.+)$
        tag $1.${tag}
      </rule>
    </match>

  kube-audit.conf: |
    # Kube-apiserver audit logs
    <source>
      @type tail
      @id in_tail_kube_audit_logs
      # path to audit logs for kube-apiserver
      path /var/log/apiserver/audit.log
      pos_file /var/log/audit.pos
      tag audit
      <parse>
        @type json
        time_key time
        keep_time_key true
        time_format %Y-%m-%dT%H:%M:%S.%N%z
      </parse>
    </source>
    # Loginsight doesn't support ingesting `source` as a field name, get rid of it
    <filter audit>
      @type record_transformer
      @id filter_kube_audit_logs
      enable_ruby
      remove_keys source
      <record>
        log ${record}
        # namespace ${record["objectRef"].nil? ? "none":(record["objectRef"]["namespace"].nil? ? "none":record["objectRef"]["namespace"])}
      </record>
    </filter>
    # <match audit>
    #  route audit according to namespace element in context
    # @type rewrite_tag_filter
    #   <rule>
    #     key namespace
    #     pattern /^(.+)/
    #     tag ${tag}.$1
    #   </rule>
    # </match>
    # <filter audit.**>
    #   @type record_transformer
    #   remove_keys namespace
    # </filter>

  vmw-li.conf: |
    # Match everything
    # We are capturing all log messages and redirecting them to endpoints mentioned in each <store> tag.
    # One may redirect these logs to muliple endpoints (including multiple LI instances).
    # Or one may chose to tag their specific logs and add their own config to capture those tagged logs and redirect
    # them to appropriate endpoint. That specific config needs to preceed this generic one.
    <match **>
      @type copy
      <store>
        @type vmware_loginsight
        @id out_vmw_li_all_container_logs
        scheme https
        ssl_verify false
        # Loginsight host: One may use IP address or cname
        host <YOUR_LOG-INSIGHT-SERVER_IP>
        #host <YOUR_LOG-INSIGHT-SERVER_FQDN>
        port 9543
        agent_id XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
        # Keys from log event whose values should be added as log message/text to
        # Loginsight. Note these key/value pairs  won't be added as metadata/fields
        log_text_keys ["log","msg","message"]
        # Use this flag if you want to enable http debug logs
        http_conn_debug false
      </store>
      # copy plugin supports sending/copying logs to multiple plugins
      # One may choose to send them to multiple LIs
      # Or one may want send a copy to stdout for debugging
      # Please note, if you use stdout along with LI, catch the logger's log to make
      # sure they're not cyclic
      #<store>
      #  @type stdout
      #</store>
    </match>
 
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: fluentd
  namespace: kube-system

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: fluentd
  namespace: kube-system
rules:
- apiGroups: [""]
  resources:
  - namespaces
  - pods
  - pods/logs
  verbs: ["get", "list", "watch"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: fluentd
roleRef:
  kind: ClusterRole
  name: fluentd
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: fluentd
  namespace: kube-system    
    
---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: log-collector
  namespace: kube-system
  labels:
    k8s-app: log-collector
    version: v1
spec:
  selector:
    matchLabels:
      k8s-app: log-collector
      version: v1
  template:
    metadata:
      labels:
        k8s-app: log-collector
        version: v1
  minReadySeconds: 10
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
    spec:
      serviceAccount: fluentd
      serviceAccountName: fluentd
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      containers:
      - name: log-collector
        image: docker.io/ddeswart/fluentd-log-collector:latest
        command: ["fluentd", "-c", "/fluentd/etc/fluent.conf", "-p", "/fluentd/plugins"]
        resources:
          requests:
            memory: 256Mi
          limits:
            memory: 256Mi
        volumeMounts:
        - name: varlog
          mountPath: /var/log
        - name: varlogjournal
          mountPath: /var/log/journal
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: fluentdconfig
          mountPath: /fluentd/etc
      terminationGracePeriodSeconds: 30
      volumes:
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlogjournal
        hostPath:
          path: /var/log/journal
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: fluentdconfig
        configMap:
          name: fluentd-config
